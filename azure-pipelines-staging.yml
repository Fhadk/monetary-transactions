# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - staging

resources:
  - repo: self

pr: none

variables:
  tag: 'alpha-$(Build.BuildId)'
  MAVEN_CACHE_FOLDER: $(Agent.WorkFolder)/../.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: build  # name of the stage (A-Z, a-z, 0-9, and underscore)
    displayName: "Build repository"  # friendly name to display in the UI
    jobs:
      - job: Maven
        displayName: "Build repository"
        continueOnError: false
        steps:
          - task: Cache@2
            inputs:
              key: '"funcs" | maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                "funcs" | maven | "$(Agent.OS)"
                "funcs" | maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: 'Cache Maven local repo'

          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'LetshegoDigital'

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'compile'
              options: '-DskipTests'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

  - stage: quality  # name of the stage (A-Z, a-z, 0-9, and underscore)
    displayName: "Quality Dashboard"  # friendly name to display in the UI
    jobs:
      - job: Test
        displayName: "Analyze Code Quality"
        continueOnError: true
        steps:
          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'LetshegoDigital'
          - task: Cache@2
            inputs:
              key: '"funcs" | maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                "funcs" | maven | "$(Agent.OS)"
                "funcs" | maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: 'Cache Maven local repo'

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'verify'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/test-results/test/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'Letshego SonarCloud'
              organization: 'letshego'
              scannerMode: 'CLI'
              configMode: 'file'
              configFile: 'sonar-project.properties'

          - task: SonarCloudAnalyze@1

          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'

  - stage: deploy  # name of the stage (A-Z, a-z, 0-9, and underscore)
    displayName: "Push to AWS"  # friendly name to display in the UI
    jobs:
      - job: Docker
        displayName: "Container deployment to AWS"
        continueOnError: false
        steps:
          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'LetshegoDigital'
          - task: Cache@2
            inputs:
              key: '"funcs" | maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                "funcs" | maven | "$(Agent.OS)"
                "funcs" | maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: 'Cache Maven local repo'

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'compile jib:dockerBuild'
              options: '-DskipTests'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
            displayName: 'Building Docker Image'

          - task: ECRPushImage@1
            inputs:
              awsCredentials: 'AWS UAT'
              regionName: 'eu-west-1'
              imageSource: 'imagename'
              sourceImageName: 'payment-transactions'
              repositoryName: 'letshego-micro/payment-transactions'
              pushTag: '$(tag)'
            displayName: 'deploy to AWS ECR registry'

          - script: |
              sed 's/${deploy_version}/'"$TAG"'/g' src/k8s/staging-deployment.template.yaml > deployment.yaml
            displayName: 'create deployment with latest version'
            env:
              TAG: $(tag)

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dascluster-uat-1'
              namespace: 'das-ms'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/deployment.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              checkLatest: true

  - stage: patch
    displayName: "Patch AWS cluster"
    condition: eq(variables['Build.SourceBranchName'], 'staging')
    jobs:
      - job: Kubernetes
        displayName: "Update kubernetes config for staging cluster"
        continueOnError: false
        steps:
          - checkout: git://Letshego Digital Governance/k8s-gitops@$(Build.SourceBranchName)
            path: deployment_k8s

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dascluster-uat-1'
              command: 'apply'
              arguments: '-f $(System.DefaultWorkingDirectory)/deployment/$(Build.SourceBranchName)-env'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

